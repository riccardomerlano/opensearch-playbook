---

### ONLINE MODE ###
- name: Dashboards Install | [OnLine] Download opensearch dashbaord {{ os_dashboards_version }} (URL={{ dashboards_download_url }})
  get_url:
    url: "{{ dashboards_download_url }}"
    dest: "/tmp/opensearch-dashboards.tar.gz"
  register: download
  when: installation_mode == "online"

### SSH MODE ###
- name: Dashboards Install | [ssh] Create local temporary directory for zip download
  local_action:
    module: file
    path: "{{ temp_tar_dir }}"
    state: directory
  run_once: true
  when: installation_mode == "ssh"

- name: Dashboards Install | [ssh] Download opensearch dashbaord {{ os_dashboards_version }} (URL={{ dashboards_download_url }})
  delegate_to: localhost
  get_url:
    url: "{{ dashboards_download_url }}"
    dest: "{{ temp_tar_dir }}"
  register: download
  when: installation_mode == "ssh"

- name: Dashboards Install | [ssh] Copy opensearch dashboards tar through ssh
  copy:
    src: "{{ temp_tar_dir }}/opensearch-dashboards-{{ os_dashboards_version }}-linux-x64.tar.gz"
    dest: "/tmp/opensearch-dashboards.tar.gz"
  run_once: true
  when: 
    - installation_mode == "ssh"
    - download.changed

### OFFLINE MODE ###
- name: Dashboards Install | [offline] Copy opensearch dashboards tar in temp directory for installation mode indipendent part
  delegate_to: localhost
  copy:
    src: "{{ offline_tar_dir }}/opensearch-dashboards-{{ os_dashboards_version }}-linux-x64.tar.gz"
    dest: "/tmp/opensearch-dashboards.tar.gz"
  run_once: true
  register: download
  when: installation_mode == "offline"
### END OF INSTALLATION MODE ###

- name: Dashboards Install | Create opensearch user
  user:
    name: "{{ os_user }}"
    state: present
    shell: /bin/bash
  when: download.changed

- name: Dashboards Install | Create home directory
  file:
    path: "{{ os_dashboards_home }}"
    state: directory
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
  when: download.changed

- name: Dashboards Install | Extract the tar file
  command: chdir=/tmp/ tar -xvzf opensearch-dashboards.tar.gz -C "{{ os_dashboards_home }}" --strip-components=1
  when: download.changed

### NO PROPRIETARY CERT ###
- name: Dashboards Install | [No-prop-cert] Copy the dashboard certificates to opensearch nodes
  copy:
    src: "{{ localhost_certs_dir }}/{{ item }}"
    dest: "{{ os_dash_conf_dir }}"
    mode: 0600
  with_items:
    - root-ca.pem
    - root-ca-key.pem
    - dashboard-key.pem
    - dashboard.pem
  when: proprietary_dashboard_cert == "no_cert"

### LOCAL PROPRIETARY CERT ###
- name: Dashboards Install | [Local-prop-cert] Copy the dashboard certificates to opensearch nodes
  copy:
    src: "{{ proprietary_dashboard_cert_dir }}"
    dest: "{{ os_dash_conf_dir }}"
    mode: 0600
  when: proprietary_dashboard_cert == "local"

### REMOTE PROPRIETARY CERT ###
- name: Dashboards Install | [Remote-prop-cert] Copy the dashboard certificates to opensearch nodes
  command: "mv {{ proprietary_dashboard_cert_dir }} {{ os_dash_conf_dir }}"
  when: proprietary_dashboard_cert == "remote"
### END OF PROPRIETARY CERT ###

- name: Security Plugin configuration | Set the file ownerships
  file:
    dest: "{{ os_dashboards_home }}"
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    recurse: yes

- name: Dashboards Install | Set the config folder permission
  file:
    dest: "{{ os_dash_conf_dir }}"
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: 0700

- name: Dashboards Install | Copy Configuration File
  template:
    src: opensearch_dashboards.yml
    dest: "{{os_dash_conf_dir}}/opensearch_dashboards.yml"
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: 0644
    backup: yes

- name: Dashboards Install | create systemd service
  template:
    src: dashboards.service
    dest: "{{ systemctl_path }}/dashboards.service"
